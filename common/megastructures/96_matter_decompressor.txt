# Matter Decompressor Site 
matter_decompressor_0 = {
	entity = "construction_platform_entity"
	construction_entity = "construction_platform_entity"
	portrait = "GFX_megastructure_construction_background"
	place_entity_on_planet_plane = no
	entity_offset = { x = -20 y = -20 }
	rotate_to_center = no
	scale_offset = yes
	build_time = 1800
	resources = {
		category = megastructures
		cost = {
			alloys = 5000
			influence = 300
		}

		upkeep = {
			energy = 5
		}
	}

	prerequisites = { "tech_matter_decompressor" }

	potential = {
		has_gw_matter_decompressor = yes
	}
	
	possible = {
		exists = starbase
		custom_tooltip = {
			fail_text = "requires_inside_border"
			is_inside_border = from
		}		
		custom_tooltip = {
			fail_text = "requires_surveyed_system"
			NOT = {
				any_system_planet = {
					is_surveyed = {
						who = prev.from
						status = no
					}
				}
			}
		}
		custom_tooltip = {
			fail_text = "requires_no_habitable_planets"
			NOT = {
				any_system_planet = {
					colonizeable_planet = yes
				}
			}
		}
		custom_tooltip = {
			fail_text = "requires_black_hole"
			is_star_class = sc_black_hole
		}
		#custom_tooltip = {
		#	fail_text = "requires_no_existing_megastructure"
		#	#will be changed to type-specific string with next translation pass
		#	#fail_text = "requires_no_existing_matter_decompressor"
		#	from = {
		#		NOT = {
		#			any_owned_megastructure = {
		#				OR = {
		#					is_megastructure_type = matter_decompressor_0
		#					is_megastructure_type = matter_decompressor_1
		#					is_megastructure_type = matter_decompressor_2
		#					is_megastructure_type = matter_decompressor_3
		#					is_megastructure_type = matter_decompressor_4
		#					#is_megastructure_type = matter_decompressor_restored
		#				}
		#			}
		#		}
		#	}
		#}
		#custom_tooltip = {
		#	fail_text = "requires_no_existing_megastructure"
		#	#NOT = { has_any_megastructure = yes }
		#	has_no_non_gate_megastructure = yes
		#}
		custom_tooltip = {
			fail_text = "requires_no_existing_megastructure"
			#will be changed to type-specific string with next translation pass
			#fail_text = "requires_no_existing_matter_decompressor"
			from = {
				NOT = {
					any_system_megastructure = { # exclude gateways
						OR = {
							is_megastructure_type = ring_world_1
							is_megastructure_type = ring_world_2_intermediate
							is_megastructure_type = ring_world_2
							is_megastructure_type = ring_world_3_intermediate
							is_megastructure_type = ring_world_ruined
							is_megastructure_type = ring_world_restored
						}
					}
				}
			}
		}
		#custom_tooltip = {
		#	fail_text = "requires_no_existing_megastructure"
		#	#NOT = { has_any_megastructure = yes }
		#	has_no_non_gate_megastructure = yes
		#}
	}
	
	placement_rules = {
		planet_possible = {
			custom_tooltip = {
				fail_text = "must_build_around_star"
				is_star = yes
			}
			custom_tooltip = {
				fail_text = "requires_no_anomaly"
				NOT = { has_anomaly = yes }
			}
			custom_tooltip = {
				fail_text = "requires_no_orbital_station"
				has_orbital_station = no
			}
			is_star_class = sc_black_hole
			custom_tooltip = {
				fail_text = "requires_no_existing_megastructure"
				#can_build_megastructure_on_planet = yes
				NOT = { has_planet_flag = has_megastructure }
			}
		}
	}
	
	# root = system
	# from = country	
	ai_weight = {
		factor = 15
		
		modifier = {
			factor = 0.1
			starbase = { NOT = { has_starbase_size >= starbase_starfortress } }
		}	
		
		modifier = {
			factor = 0.1
			any_neighbor_system = {
				exists = owner
				NOT = { 
					owner = { is_same_value = from } 
				}
			}
		}
	}
	
	on_build_start = {}
	on_build_cancel = {}
	on_build_complete = {
		from = { set_country_flag = built_matter_decompressor_site }
		fromfrom.planet = {
			set_planet_flag = has_megastructure
		}
	}
}

matter_decompressor_ruined = {
	entity = "matter_decompressor_destroyed_01_entity"
	construction_entity = "matter_decompressor_stage_4_construction_entity"
	portrait = "GFX_megastructure_construction_background"
	entity_offset = { x = -20 y = -20 }
	rotate_to_center = yes
	scale_offset = yes
	place_entity_on_planet_plane = no

	potential = {
		always = no
	}
	
	on_build_complete = {
		fromfrom.planet = {
			set_planet_flag = has_megastructure
		}
	}
}