namespace = civic_events

country_event = {
	id = civic_events.0
	hide_window = yes
	is_triggered_only = yes
	
	immediate = {
		if = {
			limit = { has_civic = civic_synthetic_evolution }
			give_technology = { tech = tech_administrative_ai message = no }
			give_technology = { tech = tech_cryostasis_1 message = no }
			give_technology = { tech = tech_cryostasis_2 message = no }
			give_technology = { tech = tech_self_aware_logic message = no }
			give_technology = { tech = tech_automated_exploration message = no }
			give_technology = { tech = tech_sapient_ai message = no }
			give_technology = { tech = tech_combat_computers_1 message = no }
			give_technology = { tech = tech_combat_computers_2 message = no }
			give_technology = { tech = tech_combat_computers_3 message = no }
			give_technology = { tech = tech_artificial_moral_codes message = no }
			give_technology = { tech = tech_synthetic_thought_patterns message = no }
			give_technology = { tech = tech_powered_exoskeletons message = no }
			give_technology = { tech = tech_robotic_workers message = no }
			give_technology = { tech = tech_droid_workers message = no }
			give_technology = { tech = tech_synthetic_workers message = no }
			give_technology = { tech = tech_synthetic_leaders message = no }
			add_modifier = { modifier = civic_synthetic_evolution days = -1 }
			add_resource = { energy = 200 }
			add_resource = { food = -200 }
		}
		if = {
			limit = { has_civic = civic_evolutionary_mastery }
			give_technology = { tech = tech_hydroponics message = no }
			give_technology = { tech = tech_gene_crops message = no }
			give_technology = { tech = tech_nano_vitality_crops message = no }
			give_technology = { tech = tech_nutrient_replication message = no }
			give_technology = { tech = tech_frontier_health message = no }
			give_technology = { tech = tech_frontier_hospital message = no }
			give_technology = { tech = tech_genome_mapping message = no }
			give_technology = { tech = tech_epigenetic_triggers message = no }
			give_technology = { tech = tech_cloning message = no }
			give_technology = { tech = tech_gene_banks message = no }
			give_technology = { tech = tech_glandular_acclimation message = no }
			give_technology = { tech = tech_gene_expressions message = no }
			give_technology = { tech = tech_selected_lineages message = no }
			give_technology = { tech = tech_capacity_boosters message = no }
			give_technology = { tech = tech_subdermal_stimulation message = no }
			give_technology = { tech = tech_morphogenetic_field_mastery message = no }
			give_technology = { tech = tech_gene_tailoring message = no }
			give_technology = { tech = tech_gene_seed_purification message = no }
			give_technology = { tech = tech_genetic_resequencing message = no }
			add_modifier = { modifier = civic_evolutionary_mastery days = -1 }
		}
		if = {
			limit = { has_civic = civic_transcendence }
			set_country_flag = researched_tech_telepathy
			set_country_flag = civic_transcendence
			give_technology = { tech = tech_psionic_theory message = no }
			give_technology = { tech = tech_telepathy message = no }
			give_technology = { tech = tech_holographic_rituals message = no }
			give_technology = { tech = tech_consecration_fields message = no }
			give_technology = { tech = tech_transcendent_faith message = no }
			add_research_option = tech_psi_jump_drive_1
			add_research_option = tech_psionic_shield
			add_research_option = tech_psionic_barrier
			country_event = { id = civic_events.6 days = 20 random = 20 }
		}
	}
}

country_event = {
	id = civic_events.1
	hide_window = yes
	is_triggered_only = yes
	
	trigger = {
		is_country_type = default
		has_valid_civic = civic_ringworld_start
	}
	immediate = {
		if = {
			limit = {
				capital_scope.solar_system = {
					OR = {
						AND = {
							OR = {
								is_star_class = sc_a
								is_star_class = sc_b
								is_star_class = sc_f
								is_star_class = sc_g
								is_star_class = sc_k
								is_star_class = sc_m
							}
							any_planet = { NOT = { has_planet_flag = temp_save } }
						}
						AND = {
							OR = {
								is_star_class = sc_trinary_1
								is_star_class = sc_trinary_2
								is_star_class = sc_trinary_3
								is_star_class = sc_trinary_4
								is_star_class = sc_binary_5
								is_star_class = sc_binary_6
								is_star_class = sc_binary_7
								is_star_class = sc_binary_8
								is_star_class = sc_binary_9
								is_star_class = sc_binary_10
							}
							any_planet = { has_planet_flag = temp_save }
						}
					}
				}
			}
			capital_scope.solar_system = {
				spawn_megastructure = {
					name = "NAME_Ring_Section_A"
					type = "ring_world_3_intermediate"
					orbit_angle = 0
					orbit_distance = 45
					owner = root
					graphical_culture = root
					location = star
				}
				spawn_megastructure = {
					name = "NAME_Ring_Section_B"
					type = "ring_world_3_intermediate"
					orbit_angle = 90
					orbit_distance = 45
					owner = root
					graphical_culture = root
					location = star
				}
				spawn_megastructure = {
					name = "NAME_Ring_Section_C"
					type = "ring_world_3_intermediate"
					orbit_angle = 180
					orbit_distance = 45
					owner = root
					graphical_culture = root
					location = star
				}
				spawn_megastructure = {
					name = "NAME_Ring_Section_D"
					type = "ring_world_3_intermediate"
					orbit_angle = 270
					orbit_distance = 45
					owner = root
					graphical_culture = root
					location = star
				}
				system_star = {
					clear_deposits = yes
					set_planet_flag = starting_mining_target
					set_planet_flag = starting_deposit
					remove_planet_flag = has_megastructure
					set_deposit = d_energy_5
				}
			}
			random_planet_within_border ={
				limit = {
					is_planet_class = pc_ringworld_habitable
				}
				save_event_target_as = ringworld_capital
				set_planet_flag = ringworld_capital
			}
			random_owned_planet = {
				limit = { is_capital = yes }
				save_event_target_as = prevcapital
			}
			if = {
				limit = { has_valid_civic = civic_synthetic_evolution }
				random_owned_pop = {
					limit = { NOT = { is_same_species = root } }
					species = {
						create_species = {
							name = this
							plural = this
							namelist = this
							class = this
							portrait = this
							traits = this
							homeworld = event_target:ringworld_capital
							effect = {
								save_event_target_as = playerspecies_secondary_species
							}
						}
					}
				}
			}
			if = {
				limit = { has_valid_civic = civic_syncretic_evolution }
				random_owned_pop = {
					limit = { NOT = { is_same_species = root } }
					species = {
						create_species = {
							name = this
							plural = this
							namelist = this
							class = this
							portrait = this
							traits = this
							homeworld = event_target:ringworld_capital
							effect = {
								save_event_target_as = playerspecies_secondary_species
							}
						}
					}
				}
				last_created_species = {
					set_citizenship_type = {
						country = root
						type = citizenship_slavery
					}
				}
			}
			if = {
				limit = { owner_species = { OR = { is_species_class = ROBOT is_species_class = ROBOT_GENDER } } }
				create_species = {
					name = this
					namelist = this
					plural = this
					class = "ROBOT"
					portrait = this
					traits = this
					homeworld = event_target:ringworld_capital
					effect = { save_event_target_as = playerspecies }
				}
			}
			else_if = {
				limit = { owner_species = { NOR = { is_species_class = ROBOT is_species_class = ROBOT_GENDER } } }
				create_species = {
					name = this
					namelist = this
					plural = this
					class = this
					portrait = this
					traits = this
					homeworld = event_target:ringworld_capital
					effect = { save_event_target_as = playerspecies }
				}
			}
			if = {
				limit = {
					owner_species = {
						NOR = {
							is_species_class = ROBOT
							is_species_class = ROBOT_GENDER
						}
					}
				}
				modify_species = {
					species = event_target:playerspecies
					ideal_planet_class = event_target:prevcapital
					remove_trait = trait_pc_ringworld_habitable_preference
					base = none
				}
				last_created_species = { save_event_target_as = playerspecies }
				if = {
					limit = { exists = event_target:playerspecies_secondary_species }
					modify_species = {
						species = event_target:playerspecies_secondary_species
						ideal_planet_class = event_target:prevcapital
						remove_trait = trait_pc_ringworld_habitable_preference
						base = none
					}
					last_created_species = { save_event_target_as = playerspecies_secondary_species }
				}
			}
			every_owned_leader = { change_species = event_target:playerspecies }
			every_pool_leader = { change_species = event_target:playerspecies }
			change_dominant_species = { species = event_target:playerspecies }
			event_target:ringworld_capital = {
				set_owner = root
				set_controller = root
				create_colony = {
					owner = root
					species = root.owner_species
				}
				remove_all_buildings = yes
				every_owned_pop = { kill_pop = yes }
				generate_start_buildings_and_districts = yes
				set_name = "[ROOT.Capital.GetName]"
				set_capital = yes
				remove_planet_flag = ringworld_capital
				add_deposit = d_meteorite_crater
				add_district = district_mining_ringworld
				add_district = district_mining_ringworld
				if = {
					limit = { owner = { has_civic = civic_syncretic_evolution } }
					while = {
						count = 12
						create_pop = {
							species = event_target:playerspecies_secondary_species
							ethos = random
						}
					}
				}
				if = {
					limit = { owner = { has_civic = civic_synthetic_evolution } }
					root = { set_built_species = event_target:playerspecies_secondary_species }
					event_target:playerspecies_secondary_species = {
						set_citizenship_type = {
							country = root
							type = citizenship_robot_servitude
						}
						set_living_standard = {
							country = root
							type = living_standard_servitude
						}
					}
					add_district = district_generator_uncapped
					remove_district = district_farming_uncapped
					remove_district = district_farming_uncapped
					while = {
						count = 8
						create_pop = {
							species = event_target:playerspecies_secondary_species
							ethos = random
						}
						last_created_pop = {
							clear_ethos = yes
						}
					}
					while = {
						limit = { num_pops < 27 }
						create_pop = {
							species = owner_main_species
							ethos = random
						}
					}
				}
				else_if = {
					limit = { root = { is_megacorp = yes} }
					while = {
						limit = { num_pops < 28 }
						create_pop = {
							species = owner_main_species
							ethos = random
						}
					}				
				}	
				else = {
					while = {
						limit = { num_pops < 24 }
						create_pop = {
							species = owner_main_species
							ethos = random
						}
					}		
				}
			}
			#random_owned_leader = {
			#	limit = { leader_class = governor }
			#	save_event_target_as = leader_governor
			#}
			capital_scope = {
				#assign_leader = event_target:leader_governor
				solar_system = {
					set_asteroid_belt = { radius = 0 }
					if = {
						limit = { any_planet = { has_planet_flag = temp_save } }
						every_system_planet = { 
							limit = {
								NOR = {
									is_star = yes
									is_ringworld = yes
								}
								has_planet_flag = temp_save
							}
							destroy_colony = yes
							remove_planet = yes 
						}
					}
					else = {
						every_system_planet = { 
							limit = {
								NOR = {
									is_star = yes
									is_ringworld = yes
								}
							}
							destroy_colony = yes
							remove_planet = yes 
						}
					}
					random_system_planet = {
						limit = {
							is_planet_class = pc_ringworld_habitable
							NOT = { is_capital = yes }
							NOR = {
								has_planet_flag = nongye
								has_planet_flag = gongye
								has_planet_flag = maoyi
							}
						}
						add_deposit = d_meteorite_crater
						set_planet_flag = nongye
						set_name = "NAME_Agrarian_District"
						add_district = district_farming_uncapped
					}
					random_system_planet = {
						limit = {
							is_planet_class = pc_ringworld_habitable
							NOT = { is_capital = yes }
							NOR = {
								has_planet_flag = nongye
								has_planet_flag = gongye
								has_planet_flag = maoyi
							}
						}
						add_deposit = d_meteorite_crater
						set_planet_flag = gongye
						set_name = "NAME_Industrial_District"
						add_district = district_mining_ringworld
					}
					random_system_planet = {
						limit = {
							is_planet_class = pc_ringworld_habitable
							NOT = { is_capital = yes }
							NOR = {
								has_planet_flag = nongye
								has_planet_flag = gongye
								has_planet_flag = maoyi
							}
						}
						add_deposit = d_meteorite_crater
						set_planet_flag = maoyi
						set_name = "NAME_Trade_District"
						add_district = district_generator_uncapped
					}
					every_system_planet = {
						remove_planet_flag = nongye
						remove_planet_flag = gongye
						remove_planet_flag = maoyi
					}
				}
			}
			every_planet_within_border = {
				limit = {
					has_deposit_for = shipclass_mining_station 
					has_mining_station = no
				}
				create_mining_station = {
					owner = ROOT
				}
			}
			every_planet_within_border = {
				limit = {
					is_ringworld = yes
					has_deposit_for = shipclass_research_station 
					has_research_station = no
				}
				create_research_station = {
					owner = ROOT
				}
			}
		}
	}
}

country_event = {
	id = civic_events.2
	hide_window = yes
	is_triggered_only = yes
	
	trigger = {
		is_country_type = default
		NOT = { has_valid_civic = civic_ringworld_start }
	}
	immediate = {
		capital_scope = {
			solar_system = {
				random_system_planet = {
					limit = { is_ringworld = yes is_capital = no }
					save_event_target_as = has_ringworld
				}
			}
		}
		if = {
			limit = {
				OR = {
					capital_scope = {
						is_ringworld = yes
					}
					exists = event_target:has_ringworld
				}
			}
			every_owned_planet = {
				remove_all_buildings = yes
				remove_all_districts = yes
				every_owned_pop = {
					kill_pop = yes
				}
				destroy_colony = yes
			}
		}
	}
}

country_event = {
	id = civic_events.6
	title = "utopia.3000.name"
	desc = utopia.3000.intro.desc
	diplomatic = yes
	force_open = yes
	
	picture_event_data = {
		portrait = shroud1
		room = shroud_room
	}
	
	is_triggered_only = yes

	immediate = {
		set_country_flag = shroud_diplomacy_engaged
		set_country_flag = shroud_intro
		random_country = {
			limit = { is_country_type = shroud }
			establish_communications_no_message = root
		}
	}

	after = {
		hidden_effect = {
			country_event = { id = civic_events.7 }
		}
	}

	option = {
		name = "utopia.3000.a"

		hidden_effect = {
			random_list = {
				90 = {
					add_modifier = {
						modifier = "shroud_happiness"
						days = 1800
					}
				}
				10 = {}
			}
			random_list = {
				90 = {
					add_modifier = {
						modifier = "shroud_research_speed"
						days = 1800
					}
				}
				10 = {}
			}
			random_list = {
				90 = {
					add_modifier = {
						modifier = "shroud_influence_boost"
						days = 1800
					}
				}
				10 = {}
			}
			random_list = {
				90 = {
					add_modifier = {
						modifier = "shroud_unity_boost"
						days = 1800
					}
				}
				10 = {}
			}
			random_list = {
				90 = {
					add_modifier = {
						modifier = "shroud_ethic_boost"
						days = 1800
					}
				}
				10 = {}
			}
			add_modifier = {
				modifier = "shroud_cooldown"
				days = 1800
			}
		}
	}
	option = {
		name = "exit.shroud"
		custom_tooltip = "exit.shroud.tooltip"
		default_hide_option = yes
	}
}

country_event = {
	id = civic_events.7
	title = "boon.bestowed"
	desc = utopia.3000.10.desc
	diplomatic = yes
	force_open = yes
	
	picture_event_data = {
		portrait = shroud1
		room = shroud_room
	}
	is_triggered_only = yes
	after = {
		hidden_effect = {
			remove_country_flag = shroud_diplomacy_engaged
			remove_country_flag = shroud_intro
		}
	}
	option = {
		name = "exit.shroud"
		default_hide_option = yes
	}
}